App framework:
    App class
        Contains instances of various required components
        Has methods for setting/adding components or getting them

    App state
       FSM states
         Init/Shutdown functions for each state
         Init with params (for example, a connecting state needs a server endpoint to connect to)
         FSM API for switching states
             Can pass params to new state
         Update function
             Called from main loop, updates local state or does nothing
         Handle event functions
             Called from main loop, updates local state to reflect event if required
             Should have callbacks for SDL events, network packets, etc
         Special states
             EndProgramState state - cleans up resources and then simply terminates the program
             IdleState state  - if no other states exist, this one is used, states can be dynamically added via the UI and other means, so this is not in fact pointless as it may seem
       Collection of variables accessible from console
         Pure console variables or bound to a set of get/set functions in code
       Global state
         Stuff like debug mode etc
         Read-only version strings etc
         Other stuff like paused flag etc
       Local state
         Accessible only while within a particular (local) FSM state
         Stuff like avatar position inworld etc
       Both global and local state are merged into one, local state overrides global state on read queries, write queries update both
    Interfaces
       Nuklear (GUI)
       CLI
       Web
         websockets/RPC etc - could be handy for bots and servers
    Configuration
       Generate default configurations and save
       Load config from command line params and .cfg files
       Bound to console variables and available at runtime
       plugin-specific settings
    Console + logging
       Dynamic console commands
       Boost logging output
       Retained output buffer (so console can be rendered in GUI if required)
          If console is cleared, the scrollback is lost unless preserved by the UI or another component
    Plugin manager
       dlopen-based for now
       Add Python/Lua/etc later
       App specifies API for different plugin types as a pointer to a struct

namespaces:
   opencraft::                root namespace
       appfw::                app framework - includes base app class
          appstate::          app state code
              fsm::           Finite State Machine code
              appvars::       console variables etc, classes for both global+local state
          configuration::     configuration loading - classes for loading+saving config and binding to appvars
          console::           console code - includes BaseConsole class
              cmdshell::      dynamic console command support
              logging::       logging setup code including support for file rotation etc
          interfaces::        user interface code including base classes
              graphical::     graphical UI code including base
                  nuklear::   nuklear GUI implementation
              cli::           Command Line UI, provides a stdio interface to the console and nothing else
              curses::        possible future implementation: add a CURSES interface
              web::           web frontend
          plugins::           plugin manager code
              api::           API base classes for plugins
              loaders::       plugin loaders
                  dlopen::    dlopen() based plugin loader

configuration:
   app specifies configuration variables:
       data type
       optional command-line switch
       optional environment variable
       optional bind to global variables (as read/write or read-only)
       default values
       required values
       load/save settings
       generate default config file
   integrate with plugin manager
       each plugin can specify its own settings including default values etc stored in seperate namespace in config files (sections in .ini, or a seperate plugins dict in JSON etc)

configuration via libconfig:
   app specifies:
       config file name and search paths
       default values for each setting
       command-line switches (or NULL)
       optional usage/description for each setting
   configuration manager searches for config file, if not found config file is written to ~/

   configuration manager methods:
      constructor(filename,search_path_array)
      add_bool(setting_name,default_val,cmdline_switch,description)
      add_int(...)
      add_string(...)


rendering / game loop:
   when ingame, current FSM state should be added as a listener on GUI
   nuklear GUI for launcher:
      only one FSM state
      some nuklear widgets bound to global variables
      nuklear GUI sends click events for buttons etc to FSM state, FSM state uses this to open/close windows etc
      nuklear GUI handles some events itself (such as widget changes for bound variables, switching tabs etc)
      FSM state tracks currently running external programs via appvars
   nuklear GUI for game client:
      FSM states for splash and menus
          base menu class?
      settings menu uses bound widgets
      ingame FSM state
          nuklear GUI provides OpenGL widget backed by a texture (i.e render to texture to display inside GUI)
          nuklear GUI sends click events and keyboard events when focus is on game rendering widget
          local paused flag etc
          appvars bound to getter functions for speed (as opposed to avatar position reading from appvars, appvars reads from some kind of avatar instance until FSM state shutdown)
      loading / connecting FSM state
          subclasses of a generic progress state
      texture cache
          global appvars with pointer to a texture cache class

plugins:
   plugin manager maintains a list of plugins for each API type
   API type instances returned from functions specified in plugin
       plugin loader is responsible for obtaining the API types and creating instances of them
       for dlopen, plugin simply has an array of structs with API type, version and reference to a function that can create an instance of that API
           instance function must not take any parameters and should return either a struct or a class compatible with the specified version and API type
   API types specified as strings and version numbers
   each plugin can implement 1 or more API types
   app asks plugin manager for all APIs of a particular type or for all loaded plugins etc
   standard ModuleInfo API
   potentially add RPC APIs?
