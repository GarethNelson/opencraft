cmake_minimum_required(VERSION 2.8.3)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")

set (CMAKE_CXX_STANDARD 11)


#cmake_policy(SET CMP0004 OLD)

find_package(SDL2 REQUIRED)

include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
else()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

add_subdirectory(cpr)

include_directories(${CMAKE_SOURCE_DIR}/include )

# silly hack below to ensure we always rebuild version header
add_custom_command( OUTPUT ${CMAKE_SOURCE_DIR}/include/opencraft/versiondefs.h
                           ${CMAKE_SOURCE_DIR}/include/opencraft/versiondefs.fake.h
                           ${CMAKE_SOURCE_DIR}/build/buildno.txt
                           ${CMAKE_SOURCE_DIR}/build/version.txt
                    COMMAND ${CMAKE_SOURCE_DIR}/genversion.sh
                    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
                    COMMENT "creating autogenerated headers" )

add_custom_target(autogen_headers
                  DEPENDS ${CMAKE_SOURCE_DIR}/include/opencraft/versiondefs.fake.h)

file(GLOB OC_COMMON_SRC "src/*.cpp")

add_library(opencraft-common SHARED ${OC_COMMON_SRC})

target_link_libraries(opencraft-common ${CPR_LIBRARIES} SDL2 GL GLEW GLU)
add_dependencies(opencraft-common autogen_headers)

file(STRINGS ${CMAKE_SOURCE_DIR}/build/buildno.txt BUILD_NUMBER)
file(STRINGS ${CMAKE_SOURCE_DIR}/build/version.txt VERSION_NUMBER)

set_target_properties(opencraft-common PROPERTIES
                       VERSION ${VERSION_NUMBER}.${BUILD_NUMBER})

add_executable(nuklear_test ${CMAKE_SOURCE_DIR}/tests/nuklear_test.cpp)
target_link_libraries(nuklear_test opencraft-common)
