Basic features
  Packet serialisation/deserialisation

Packet reader
  Pass a socket fd, get back a packet - blocking (so should only be called when the socket is ready to read from)

Packet classes
  Automatically generated from burger data
  Some packets may be manually defined instead of generated from burger data
  All packets inherit from opencraft::packets::base_packet

raw_packet encapsulation
  all packets may be wrapped inside a raw_packet by serialising the packet and then passing it to raw_packet's constructor
  raw packets may then be wrapped inside of zlib compression etc before final transmission

Basic usage:
  Create a TCP socket, a packet_reader and a packet_writer
  Use packet_reader to read packets and packet_writer to transmit
  Create packets by passing relevant fields to the relevant classe's constructor then pack it and send it across the TCP socket
  Fields are assigned alphabetical names (i.e first is a, second is b and so on) unless proper field names have been defined
  Packets are all subclasses of opencraft_packet and so pointers can be cast after checking the return value of ident() or name()

Examples
  chat_client: implements a simple chat client - doesn't even parse the JSON, that's your job
  ping_server: pings a server and gets back the status response details, spitting it out on stdout


Stuff not done / brainstorming / random ideas:
  Data on blocktypes/entities/biomes etc in header files
  Async client
    Read from socket only when data is waiting to be read
  libsl-style TestClient
    Command line interface for fully testing the library
  Abstraction of chunks/blocks/map
    Should provide facilities for both parsing and serialisation of chunk data
  Simplified movement/physics
    Track player position in single class, allow moving in set vectors, TP etc etc

