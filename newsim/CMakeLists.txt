cmake_minimum_required(VERSION 2.8.3)
FIND_PACKAGE(PythonInterp 2.7 REQUIRED)
FIND_PACKAGE(PythonLibs   2.7 REQUIRED)

FIND_PACKAGE(Boost COMPONENTS system program_options thread log log_setup python)

set (CMAKE_CXX_STANDARD 11)

include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
else()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

ADD_DEFINITIONS(-DBOOST_LOG_DYN_LINK)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS} ${CMAKE_SOURCE_DIR}/include)

FILE(GLOB newsim_src ${CMAKE_SOURCE_DIR}/src/*.cpp)

ADD_EXECUTABLE(newsim ${newsim_src})

TARGET_LINK_LIBRARIES(newsim pthread ${PYTHON_LIBRARIES} ${Boost_LIBRARIES})

ADD_CUSTOM_COMMAND( OUTPUT ${CMAKE_SOURCE_DIR}/include/version.h ${CMAKE_SOURCE_DIR}/include/event_types.autogen.h
                    COMMAND ${CMAKE_SOURCE_DIR}/autogen.sh
                    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
                    COMMENT "Creating autogenerated headers" )

add_custom_target(autogen_headers
                  DEPENDS ${CMAKE_SOURCE_DIR}/include/version.h ${CMAKE_SOURCE_DIR}/include/event_types.autogen.h)

add_dependencies(newsim autogen_headers)

